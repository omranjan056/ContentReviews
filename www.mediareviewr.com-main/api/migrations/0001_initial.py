# Generated by Django 3.2 on 2022-06-11 21:28

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(max_length=2000)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('author_name', models.CharField(blank=True, max_length=30, null=True)),
                ('author_image', models.ImageField(blank=True, null=True, upload_to='images/')),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=150, unique=True)),
                ('author_name', models.CharField(blank=True, max_length=30, null=True)),
                ('description', models.TextField(blank=True, max_length=10000)),
                ('type', models.CharField(max_length=50)),
                ('members_count', models.IntegerField(default=0)),
                ('post_count', models.IntegerField(default=0)),
                ('header_image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media', models.CharField(max_length=100)),
                ('popularity', models.IntegerField()),
                ('total_popularity', models.IntegerField(default=0)),
                ('average_rating', models.FloatField(default=0)),
                ('type', models.CharField(blank=True, max_length=50, null=True)),
                ('media_image', models.ImageField(blank=True, null=True, upload_to='images/')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_type', models.CharField(default='review', max_length=50)),
                ('title', models.CharField(blank=True, default='', max_length=100)),
                ('type', models.CharField(blank=True, max_length=50, null=True)),
                ('season', models.CharField(blank=True, max_length=25, null=True)),
                ('episode', models.IntegerField(blank=True, null=True)),
                ('media', models.CharField(blank=True, default='', max_length=100)),
                ('rating', models.FloatField(blank=True, null=True)),
                ('body', models.TextField(blank=True, max_length=20000, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('author_name', models.CharField(blank=True, max_length=30, null=True)),
                ('author_image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('popularity', models.IntegerField(default=0)),
                ('ranking', models.IntegerField(default=0)),
                ('rankingMovie', models.IntegerField(default=0)),
                ('rankingAnime', models.IntegerField(default=0)),
                ('rankingSeries', models.IntegerField(default=0)),
                ('rankingGame', models.IntegerField(default=0)),
                ('rankingLiterature', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to='auth.user', verbose_name='user')),
                ('name', models.CharField(blank=True, max_length=30, null=True, unique=True)),
                ('post_count', models.IntegerField(default=0)),
                ('location', models.CharField(blank=True, default='', max_length=30)),
                ('bio', models.TextField(blank=True, default='', max_length=300)),
                ('status', models.CharField(blank=True, default='', max_length=100)),
                ('picture', models.ImageField(blank=True, default='uploads/profile_pictures/default.jpg', null=True, upload_to='uploads/profile_pictures')),
                ('watchlist', models.TextField(blank=True, default='', max_length=10000)),
                ('points', models.IntegerField(default=0)),
                ('movie', models.IntegerField(default=0)),
                ('anime', models.IntegerField(default=0)),
                ('series', models.IntegerField(default=0)),
                ('game', models.IntegerField(default=0)),
                ('literature', models.IntegerField(default=0)),
                ('first_movie', models.CharField(blank=True, default='', max_length=100)),
                ('second_movie', models.CharField(blank=True, default='', max_length=100)),
                ('third_movie', models.CharField(blank=True, default='', max_length=100)),
                ('fourth_movie', models.CharField(blank=True, default='', max_length=100)),
                ('fifth_movie', models.CharField(blank=True, default='', max_length=100)),
                ('first_anime', models.CharField(blank=True, default='', max_length=100)),
                ('second_anime', models.CharField(blank=True, default='', max_length=100)),
                ('third_anime', models.CharField(blank=True, default='', max_length=100)),
                ('fourth_anime', models.CharField(blank=True, default='', max_length=100)),
                ('fifth_anime', models.CharField(blank=True, default='', max_length=100)),
                ('first_series', models.CharField(blank=True, default='', max_length=100)),
                ('second_series', models.CharField(blank=True, default='', max_length=100)),
                ('third_series', models.CharField(blank=True, default='', max_length=100)),
                ('fourth_series', models.CharField(blank=True, default='', max_length=100)),
                ('fifth_series', models.CharField(blank=True, default='', max_length=100)),
                ('first_game', models.CharField(blank=True, default='', max_length=100)),
                ('second_game', models.CharField(blank=True, default='', max_length=100)),
                ('third_game', models.CharField(blank=True, default='', max_length=100)),
                ('fourth_game', models.CharField(blank=True, default='', max_length=100)),
                ('fifth_game', models.CharField(blank=True, default='', max_length=100)),
                ('first_literature', models.CharField(blank=True, default='', max_length=100)),
                ('second_literature', models.CharField(blank=True, default='', max_length=100)),
                ('third_literature', models.CharField(blank=True, default='', max_length=100)),
                ('fourth_literature', models.CharField(blank=True, default='', max_length=100)),
                ('fifth_literature', models.CharField(blank=True, default='', max_length=100)),
                ('followers', models.ManyToManyField(blank=True, related_name='profile_followers', to='api.UserProfile')),
                ('following', models.ManyToManyField(blank=True, related_name='profile_following', to='api.UserProfile')),
                ('saved', models.ManyToManyField(blank=True, related_name='saved', to='api.Post')),
            ],
        ),
        migrations.AddField(
            model_name='post',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.userprofile'),
        ),
        migrations.AddField(
            model_name='post',
            name='dislikes',
            field=models.ManyToManyField(blank=True, related_name='post_dislikes', to='api.UserProfile'),
        ),
        migrations.AddField(
            model_name='post',
            name='group1',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='group1', to='api.group'),
        ),
        migrations.AddField(
            model_name='post',
            name='group2',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='group2', to='api.group'),
        ),
        migrations.AddField(
            model_name='post',
            name='group3',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='group3', to='api.group'),
        ),
        migrations.AddField(
            model_name='post',
            name='likes',
            field=models.ManyToManyField(blank=True, related_name='post_likes', to='api.UserProfile'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.IntegerField()),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('user_has_seen', models.BooleanField(default=False)),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='api.comment')),
                ('from_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notification_from', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='api.post')),
                ('to_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notification_to', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='group',
            name='author',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.userprofile'),
        ),
        migrations.AddField(
            model_name='group',
            name='members',
            field=models.ManyToManyField(blank=True, related_name='members', to='api.UserProfile'),
        ),
        migrations.AddField(
            model_name='comment',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.userprofile'),
        ),
        migrations.AddField(
            model_name='comment',
            name='dislikes',
            field=models.ManyToManyField(blank=True, related_name='comment_dislikes', to='api.UserProfile'),
        ),
        migrations.AddField(
            model_name='comment',
            name='likes',
            field=models.ManyToManyField(blank=True, related_name='comment_likes', to='api.UserProfile'),
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.post'),
        ),
    ]
